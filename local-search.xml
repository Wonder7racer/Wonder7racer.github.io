<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Run XV6 on Apple Silicon</title>
    <link href="/2024/08/28/Run-XV6-on-Apple-Silicon/"/>
    <url>/2024/08/28/Run-XV6-on-Apple-Silicon/</url>
    
    <content type="html"><![CDATA[<h1 id="Run-XV6-on-Apple-Silicon"><a href="#Run-XV6-on-Apple-Silicon" class="headerlink" title="Run XV6 on Apple Silicon"></a>Run XV6 on Apple Silicon</h1><h2 id="Setup-of-the-experimental-environment"><a href="#Setup-of-the-experimental-environment" class="headerlink" title="Setup of the experimental environment"></a>Setup of the experimental environment</h2><p>This experiment uses a MacOS system based on the ARM architecture, so the first step is to build a RISC-V-based xv6 experimental environment, and use cross-compilation technology and simulator to simulate the RISC-V environment. Be prepared for subsequent modifications and compilation of XV6 code.</p><h3 id="Install-a-toolchain-capable-of-compiling-RISC-V-object-code"><a href="#Install-a-toolchain-capable-of-compiling-RISC-V-object-code" class="headerlink" title="Install a toolchain capable of compiling RISC-V object code"></a>Install a toolchain capable of compiling RISC-V object code</h3><p>On MacOS, I used the homebrew package manager to install it, and the command is as followsï¼š</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew tap riscv/riscv<br>brew install riscv-tools<br></code></pre></td></tr></table></figure><p>After installing the toolchain, you need to add it to the environment variables, which can be implemented with the following command:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/local/opt/riscv-gnu-toolchain/bin</span><br></code></pre></td></tr></table></figure><h3 id="Install-the-QEMU-simulator"><a href="#Install-the-QEMU-simulator" class="headerlink" title="Install the QEMU simulator"></a>Install the QEMU simulator</h3><p>QEMU is a general-purpose and open-source machine emulation and virtualizer. It can emulate multiple hardware platforms, enabling users to run operating systems and programs of other architectures on one computer architecture. In this lab, we need to install a QEMU version that supports RISC-V. Install the QEMU emulator we need by entering the following instructions:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>qemu<br></code></pre></td></tr></table></figure><h3 id="Compile-the-XV6-source-code"><a href="#Compile-the-XV6-source-code" class="headerlink" title="Compile the XV6 source code"></a>Compile the XV6 source code</h3><p>In the xv6 source code directory, there is usually a Makefile file that defines how to build the system. A Makefile is a build automation tool that manages and automates the compilation process of a software project. In this step, we need to build xv6 using the make command and the RISC-V toolchain, which will automatically compile the xv6 source code and generate the object and executable files according to the rules and dependencies defined in the makefile. Go to the xv6 directory and run the following command to compile and open QEMU:</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">Make</span><br><span class="hljs-built_in">Make</span> qemu<br></code></pre></td></tr></table></figure><h3 id="Configure-the-debugging-environment-in-the-integrated-development-environment-IDE-CLION"><a href="#Configure-the-debugging-environment-in-the-integrated-development-environment-IDE-CLION" class="headerlink" title="Configure the debugging environment in the integrated development environment (IDE) (CLION)"></a>Configure the debugging environment in the integrated development environment (IDE) (CLION)</h3><p>Since debugging from the command line was too cumbersome and required to configure an IDE to facilitate debugging of code, I chose CLION as the IDE.</p><p>CLion debug xv6 must be configured with riscv-elf-gdb instead of standard GDB, which is designed specifically for the RISC-V architecture and handles the RISC-V instruction set and register configuration correctly, while the standard GDB does not support the RISC-V architecture and therefore cannot properly parse and debug code on the RISC-V platform.</p><p>Use homebrew to download riscv-elf-gdb, then enter make-qemu gdb in the terminal to get the following output, and then configure it according to the displayed port number.</p><p>After the configuration is complete, enter the make qemu-gdb command in the terminal and click the debug button in CLION to start debugging.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Operating System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/27/hello-world/"/>
    <url>/2024/08/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
